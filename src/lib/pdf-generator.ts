import jsPDF from 'jspdf'
import autoTable from 'jspdf-autotable'
import html2canvas from 'html2canvas'
import { format } from 'date-fns'
import { StudentPerformanceData, ClassAnalytics } from './analytics-engine'

export interface ReportOptions {
  includeCharts: boolean
  includeStudentDetails: boolean
  includeRecommendations: boolean
  includeAnalytics: boolean
  timeframe: 'week' | 'month' | 'semester' | 'year'
  format: 'summary' | 'detailed' | 'executive'
}

export interface ReportData {
  course: any
  students: any[]
  assignments: any[]
  analytics: ClassAnalytics
  studentPerformances: StudentPerformanceData[]
  generatedAt: Date
}

class PDFGenerator {
  private static instance: PDFGenerator
  private doc: jsPDF

  public static getInstance(): PDFGenerator {
    if (!PDFGenerator.instance) {
      PDFGenerator.instance = new PDFGenerator()
    }
    return PDFGenerator.instance
  }

  constructor() {
    this.doc = new jsPDF()
  }

  public async generateClassReport(data: ReportData, options: ReportOptions): Promise<Blob> {
    this.doc = new jsPDF()
    
    // Cover Page
    this.addCoverPage(data, options)
    
    // Executive Summary
    if (options.format === 'executive' || options.format === 'detailed') {
      this.addExecutiveSummary(data)
    }
    
    // Class Overview
    this.addClassOverview(data)
    
    // Performance Analytics
    if (options.includeAnalytics) {
      this.addPerformanceAnalytics(data)
    }
    
    // Student Details
    if (options.includeStudentDetails) {
      this.addStudentDetails(data)
    }
    
    // Recommendations
    if (options.includeRecommendations) {
      this.addRecommendations(data)
    }
    
    // Charts (if requested)
    if (options.includeCharts) {
      await this.addCharts(data)
    }
    
    return new Blob([this.doc.output('blob')], { type: 'application/pdf' })
  }

  public async generateStudentReport(
    studentData: StudentPerformanceData,
    courseData: any,
    assignments: any[]
  ): Promise<Blob> {
    this.doc = new jsPDF()
    
    // Student Cover Page
    this.addStudentCoverPage(studentData, courseData)
    
    // Performance Summary
    this.addStudentPerformanceSummary(studentData)
    
    // Assignment Details
    this.addStudentAssignmentDetails(studentData, assignments)
    
    // Predictions and Recommendations
    this.addStudentPredictions(studentData)
    
    return new Blob([this.doc.output('blob')], { type: 'application/pdf' })
  }

  private addCoverPage(data: ReportData, options: ReportOptions) {
    const pageWidth = this.doc.internal.pageSize.width
    const pageHeight = this.doc.internal.pageSize.height
    
    // Header
    this.doc.setFillColor(59, 130, 246) // Blue background
    this.doc.rect(0, 0, pageWidth, 60, 'F')
    
    // Title
    this.doc.setTextColor(255, 255, 255)
    this.doc.setFontSize(28)
    this.doc.setFont('helvetica', 'bold')
    this.doc.text('Talent Development Dashboard', pageWidth / 2, 30, { align: 'center' })
    
    this.doc.setFontSize(16)
    this.doc.setFont('helvetica', 'normal')
    this.doc.text('Comprehensive Class Analytics Report', pageWidth / 2, 45, { align: 'center' })
    
    // Course Information
    this.doc.setTextColor(0, 0, 0)
    this.doc.setFontSize(20)
    this.doc.setFont('helvetica', 'bold')
    this.doc.text(data.course.name || 'Course Name', pageWidth / 2, 100, { align: 'center' })
    
    if (data.course.section) {
      this.doc.setFontSize(14)
      this.doc.setFont('helvetica', 'normal')
      this.doc.text(`Section: ${data.course.section}`, pageWidth / 2, 115, { align: 'center' })
    }
    
    // Report Details
    this.doc.setFontSize(12)
    const reportDetails = [
      `Report Type: ${options.format.charAt(0).toUpperCase() + options.format.slice(1)}`,
      `Timeframe: ${options.timeframe.charAt(0).toUpperCase() + options.timeframe.slice(1)}`,
      `Generated: ${format(data.generatedAt, 'MMMM dd, yyyy at h:mm a')}`,
      `Total Students: ${data.students.length}`,
      `Total Assignments: ${data.assignments.length}`
    ]
    
    let yPos = 150
    reportDetails.forEach(detail => {
      this.doc.text(detail, pageWidth / 2, yPos, { align: 'center' })
      yPos += 15
    })
    
    // Footer
    this.doc.setFontSize(10)
    this.doc.setTextColor(128, 128, 128)
    this.doc.text('Generated by Talent Development Dashboard', pageWidth / 2, pageHeight - 20, { align: 'center' })
    
    this.doc.addPage()
  }

  private addExecutiveSummary(data: ReportData) {
    this.addSectionHeader('Executive Summary')
    
    const summary = [
      `This report provides a comprehensive analysis of ${data.course.name || 'the course'} performance metrics and student outcomes.`,
      '',
      `Key Highlights:`,
      `• Class Average: ${data.analytics.overallPerformance ? Math.round(data.analytics.overallPerformance.averageGrade) : 'N/A'}%`,
      `• Completion Rate: ${data.analytics.overallPerformance ? Math.round(data.analytics.overallPerformance.completionRate) : 'N/A'}%`,
      `• Active Students: ${data.analytics.overallPerformance ? `${data.analytics.overallPerformance.activeStudents} of ${data.analytics.overallPerformance.totalStudents}` : 'N/A'}`,
      `• Students Needing Intervention: ${data.analytics.predictions?.interventionNeeded ? 'Yes' : 'No'}`,
      '',
      `Predicted Outcomes:`,
      `• Projected Class Average: ${data.analytics.predictions ? Math.round(data.analytics.predictions.classAverageProjection) : 'N/A'}%`,
      `• Expected Completion Rate: ${data.analytics.predictions ? Math.round(data.analytics.predictions.expectedCompletionRate) : 'N/A'}%`
    ]
    
    let yPos = 60
    summary.forEach(line => {
      if (line.startsWith('•')) {
        this.doc.setFont('helvetica', 'normal')
        this.doc.setFontSize(11)
      } else if (line.includes(':')) {
        this.doc.setFont('helvetica', 'bold')
        this.doc.setFontSize(12)
      } else {
        this.doc.setFont('helvetica', 'normal')
        this.doc.setFontSize(11)
      }
      
      if (line.trim()) {
        this.doc.text(line, 20, yPos)
      }
      yPos += 12
    })
    
    this.doc.addPage()
  }

  private addClassOverview(data: ReportData) {
    this.addSectionHeader('Class Overview')
    
    // Performance Metrics Table
    const performanceData = [
      ['Metric', 'Current', 'Target', 'Status'],
      ['Average Grade', `${data.analytics.overallPerformance ? Math.round(data.analytics.overallPerformance.averageGrade) : 'N/A'}%`, '85%', 
       data.analytics.overallPerformance && data.analytics.overallPerformance.averageGrade >= 85 ? '✓ Met' : '⚠ Below'],
      ['Completion Rate', `${data.analytics.overallPerformance ? Math.round(data.analytics.overallPerformance.completionRate) : 'N/A'}%`, '90%',
       data.analytics.overallPerformance && data.analytics.overallPerformance.completionRate >= 90 ? '✓ Met' : '⚠ Below'],
      ['Active Students', `${data.analytics.overallPerformance?.activeStudents || 0}`, `${data.analytics.overallPerformance?.totalStudents || 0}`,
       data.analytics.overallPerformance && data.analytics.overallPerformance.activeStudents === data.analytics.overallPerformance.totalStudents ? '✓ All Active' : '⚠ Some Inactive']
    ]
    
    autoTable(this.doc, {
      head: [performanceData[0]],
      body: performanceData.slice(1),
      startY: 60,
      theme: 'striped',
      headStyles: { fillColor: [59, 130, 246] },
      styles: { fontSize: 10 }
    })
    
    // Top Performers
    const finalY = (this.doc as any).lastAutoTable.finalY + 20
    this.doc.setFontSize(14)
    this.doc.setFont('helvetica', 'bold')
    this.doc.text('Top Performers', 20, finalY)
    
    const topPerformersData = [
      ['Rank', 'Student', 'Grade', 'Completion', 'Trend'],
      ...(data.analytics.insights?.topPerformers || []).slice(0, 5).map((student, index) => [
        `${index + 1}`,
        student.name,
        `${Math.round(student.grade)}%`,
        `${Math.round(student.completionRate)}%`,
        student.trend.charAt(0).toUpperCase() + student.trend.slice(1)
      ])
    ]
    
    autoTable(this.doc, {
      head: [topPerformersData[0]],
      body: topPerformersData.slice(1),
      startY: finalY + 10,
      theme: 'striped',
      headStyles: { fillColor: [16, 185, 129] },
      styles: { fontSize: 9 }
    })
    
    this.doc.addPage()
  }

  private addPerformanceAnalytics(data: ReportData) {
    this.addSectionHeader('Performance Analytics')
    
    // Weekly Progress Table
    if (data.analytics.trends.weeklyProgress.length > 0) {
      this.doc.setFontSize(12)
      this.doc.setFont('helvetica', 'bold')
      this.doc.text('Weekly Progress Trends', 20, 60)
      
      const weeklyData = [
        ['Week', 'Avg Grade', 'Completion %', 'Submissions', 'Late Submissions'],
        ...data.analytics.trends.weeklyProgress.map(week => [
          week.week,
          `${Math.round(week.averageGrade)}%`,
          `${Math.round(week.completionRate)}%`,
          'N/A', // submissionCount not available in this data structure
          'N/A'  // lateSubmissions not available in this data structure
        ])
      ]
      
      autoTable(this.doc, {
        head: [weeklyData[0]],
        body: weeklyData.slice(1),
        startY: 70,
        theme: 'striped',
        headStyles: { fillColor: [147, 51, 234] },
        styles: { fontSize: 9 }
      })
    }
    
    // Performance Distribution
    const finalY = (this.doc as any).lastAutoTable.finalY + 20
    this.doc.setFontSize(12)
    this.doc.setFont('helvetica', 'bold')
    this.doc.text('Grade Distribution', 20, finalY)
    
    const distributionData = [
      ['Grade Range', 'Students', 'Percentage'],
      ...data.analytics.trends.performanceDistribution.map(dist => [
        dist.range,
        dist.count.toString(),
        `${Math.round(dist.percentage)}%`
      ])
    ]
    
    autoTable(this.doc, {
      head: [distributionData[0]],
      body: distributionData.slice(1),
      startY: finalY + 10,
      theme: 'striped',
      headStyles: { fillColor: [245, 158, 11] },
      styles: { fontSize: 10 }
    })
    
    this.doc.addPage()
  }

  private addStudentDetails(data: ReportData) {
    this.addSectionHeader('Student Performance Details')
    
    // At-Risk Students
    if (data.analytics.insights?.atRiskStudents && data.analytics.insights.atRiskStudents.length > 0) {
      this.doc.setFontSize(12)
      this.doc.setFont('helvetica', 'bold')
      this.doc.text('Students Requiring Intervention', 20, 60)
      
      const atRiskData = [
        ['Student', 'Current Grade', 'Completion %', 'Risk Level', 'Recommended Actions'],
        ...(data.analytics.insights?.atRiskStudents || []).map(student => {
          const studentPerf = data.studentPerformances.find(s => s.studentId === student.studentId)
          const actions = studentPerf?.predictions.recommendedInterventions.slice(0, 2).join(', ') || 'Individual assessment needed'
          return [
            student.name,
            `${Math.round(student.grade)}%`,
            `${Math.round(student.completionRate)}%`,
            'High',
            actions
          ]
        })
      ]
      
      autoTable(this.doc, {
        head: [atRiskData[0]],
        body: atRiskData.slice(1),
        startY: 70,
        theme: 'striped',
        headStyles: { fillColor: [239, 68, 68] },
        styles: { fontSize: 8, cellWidth: 'wrap' },
        columnStyles: { 4: { cellWidth: 50 } }
      })
    }
    
    // Improving Students
    if (data.analytics.insights?.improvingStudents && data.analytics.insights.improvingStudents.length > 0) {
      const finalY = (this.doc as any).lastAutoTable.finalY + 20
      this.doc.setFontSize(12)
      this.doc.setFont('helvetica', 'bold')
      this.doc.text('Students Showing Improvement', 20, finalY)
      
      const improvingData = [
        ['Student', 'Current Grade', 'Completion %', 'Trend', 'Predicted Final'],
        ...(data.analytics.insights?.improvingStudents || []).map(student => {
          const studentPerf = data.studentPerformances.find(s => s.studentId === student.studentId)
          return [
            student.name,
            `${Math.round(student.grade)}%`,
            `${Math.round(student.completionRate)}%`,
            'Improving ↗',
            `${Math.round(studentPerf?.predictions.likelyFinalGrade || 0)}%`
          ]
        })
      ]
      
      autoTable(this.doc, {
        head: [improvingData[0]],
        body: improvingData.slice(1),
        startY: finalY + 10,
        theme: 'striped',
        headStyles: { fillColor: [16, 185, 129] },
        styles: { fontSize: 9 }
      })
    }
    
    this.doc.addPage()
  }

  private addRecommendations(data: ReportData) {
    this.addSectionHeader('AI-Generated Recommendations')
    
    let yPos: number = 60
    
    // Class-wide recommendations
    this.doc.setFontSize(12)
    this.doc.setFont('helvetica', 'bold')
    this.doc.text('Class-Wide Strategies:', 20, yPos)
    yPos += 15;
    
    (data.analytics.insights?.recommendations || []).forEach((recommendation: string, index: number) => {
      this.doc.setFontSize(11)
      this.doc.setFont('helvetica', 'normal')
      this.doc.text(`${index + 1}. ${recommendation}`, 25, yPos)
      yPos += 12
    })
    
    yPos += 10
    
    // Individual student recommendations
    this.doc.setFontSize(12)
    this.doc.setFont('helvetica', 'bold')
    this.doc.text('Individual Student Interventions:', 20, yPos)
    yPos += 15
    
    const highRiskStudents = data.studentPerformances.filter(s => s.riskLevel === 'high')
    
    highRiskStudents.slice(0, 5).forEach(student => {
      this.doc.setFontSize(11)
      this.doc.setFont('helvetica', 'bold')
      this.doc.text(`${student.studentName}:`, 25, yPos)
      yPos += 10
      
      student.predictions.recommendedInterventions.slice(0, 3).forEach(intervention => {
        this.doc.setFontSize(10)
        this.doc.setFont('helvetica', 'normal')
        this.doc.text(`• ${intervention}`, 30, yPos)
        yPos += 8
      })
      
      yPos += 5
    })
  }

  private async addCharts(data: ReportData) {
    // This would capture chart elements from the DOM and add them to PDF
    // For now, we'll add a placeholder
    this.doc.addPage()
    this.addSectionHeader('Performance Charts')
    
    this.doc.setFontSize(11)
    this.doc.text('Charts and visualizations would be embedded here.', 20, 60)
    this.doc.text('This feature requires DOM chart elements to be captured.', 20, 80)
  }

  private addStudentCoverPage(studentData: StudentPerformanceData, courseData: any) {
    const pageWidth = this.doc.internal.pageSize.width
    
    // Header
    this.doc.setFillColor(16, 185, 129) // Green background
    this.doc.rect(0, 0, pageWidth, 60, 'F')
    
    this.doc.setTextColor(255, 255, 255)
    this.doc.setFontSize(24)
    this.doc.setFont('helvetica', 'bold')
    this.doc.text('Student Performance Report', pageWidth / 2, 35, { align: 'center' })
    
    // Student info
    this.doc.setTextColor(0, 0, 0)
    this.doc.setFontSize(18)
    this.doc.text(studentData.studentName, pageWidth / 2, 90, { align: 'center' })
    
    this.doc.setFontSize(14)
    this.doc.text(courseData.name || 'Course', pageWidth / 2, 110, { align: 'center' })
    
    this.doc.addPage()
  }

  private addStudentPerformanceSummary(studentData: StudentPerformanceData) {
    this.addSectionHeader('Performance Summary')
    
    const summaryData = [
      ['Metric', 'Current', 'Predicted', 'Status'],
      ['Overall Grade', `${Math.round(studentData.overallGrade)}%`, `${Math.round(studentData.predictions.likelyFinalGrade)}%`, 
       studentData.overallGrade >= 80 ? '✓ Good' : studentData.overallGrade >= 70 ? '⚠ Fair' : '⚠ Needs Improvement'],
      ['Completion Rate', `${Math.round(studentData.completionRate)}%`, '-', 
       studentData.completionRate >= 90 ? '✓ Excellent' : studentData.completionRate >= 75 ? '⚠ Good' : '⚠ Needs Improvement'],
      ['Risk Level', studentData.riskLevel.charAt(0).toUpperCase() + studentData.riskLevel.slice(1), '-', 
       studentData.riskLevel === 'low' ? '✓ On Track' : '⚠ Needs Attention'],
      ['Trend', studentData.trend.charAt(0).toUpperCase() + studentData.trend.slice(1), '-', 
       studentData.trend === 'improving' ? '✓ Positive' : studentData.trend === 'declining' ? '⚠ Concerning' : '- Stable']
    ]
    
    autoTable(this.doc, {
      head: [summaryData[0]],
      body: summaryData.slice(1),
      startY: 60,
      theme: 'striped',
      headStyles: { fillColor: [16, 185, 129] },
      styles: { fontSize: 10 }
    })
    
    this.doc.addPage()
  }

  private addStudentAssignmentDetails(studentData: StudentPerformanceData, assignments: any[]) {
    this.addSectionHeader('Assignment Performance')
    
    const assignmentData = [
      ['Assignment', 'Grade', 'Status', 'Due Date', 'Submitted'],
      ...studentData.assignments.map(assignment => [
        assignment.assignmentTitle,
        assignment.grade !== undefined ? `${assignment.grade}%` : 'Not Graded',
        assignment.isCompleted ? (assignment.isLate ? 'Late' : 'On Time') : 'Missing',
        assignment.dueDate ? assignment.dueDate.toLocaleDateString() : 'No Due Date',
        assignment.submissionDate ? assignment.submissionDate.toLocaleDateString() : 'Not Submitted'
      ])
    ]
    
    autoTable(this.doc, {
      head: [assignmentData[0]],
      body: assignmentData.slice(1),
      startY: 60,
      theme: 'striped',
      headStyles: { fillColor: [59, 130, 246] },
      styles: { fontSize: 9, cellWidth: 'wrap' }
    })
    
    this.doc.addPage()
  }

  private addStudentPredictions(studentData: StudentPerformanceData) {
    this.addSectionHeader('Predictions & Recommendations')
    
    let yPos = 60
    
    // Predictions
    this.doc.setFontSize(12)
    this.doc.setFont('helvetica', 'bold')
    this.doc.text('Performance Predictions:', 20, yPos)
    yPos += 15
    
    const predictions = [
      `Likely Final Grade: ${Math.round(studentData.predictions.likelyFinalGrade)}%`,
      `Risk of Failure: ${Math.round(studentData.predictions.riskOfFailure)}%`,
      `Next Assignment Success Rate: ${Math.round(studentData.predictions.nextAssignmentSuccess)}%`
    ]
    
    predictions.forEach(prediction => {
      this.doc.setFontSize(11)
      this.doc.setFont('helvetica', 'normal')
      this.doc.text(`• ${prediction}`, 25, yPos)
      yPos += 12
    })
    
    yPos += 10
    
    // Recommendations
    this.doc.setFontSize(12)
    this.doc.setFont('helvetica', 'bold')
    this.doc.text('Recommended Actions:', 20, yPos)
    yPos += 15
    
    studentData.predictions.recommendedInterventions.forEach(intervention => {
      this.doc.setFontSize(11)
      this.doc.setFont('helvetica', 'normal')
      this.doc.text(`• ${intervention}`, 25, yPos)
      yPos += 12
    })
  }

  private addSectionHeader(title: string) {
    const pageWidth = this.doc.internal.pageSize.width
    
    this.doc.setFillColor(243, 244, 246) // Light gray background
    this.doc.rect(0, 20, pageWidth, 25, 'F')
    
    this.doc.setTextColor(31, 41, 55) // Dark gray text
    this.doc.setFontSize(16)
    this.doc.setFont('helvetica', 'bold')
    this.doc.text(title, 20, 37)
  }
}

export const pdfGenerator = PDFGenerator.getInstance()
